events {
  worker_connections 1024;
}

http {
  set_real_ip_from 0.0.0.0/0;
  real_ip_header X-Forwarded-For;

  geoip2 /var/lib/GeoIP/GeoLite2-Country.mmdb {
    $ip_country default="" source=$remote_addr country iso_code;
  }

  map $ip_country $country_upstream {
    default rest_world_upstream;
    UK uk_upstream;
    US us_upstream;
  }

  upstream uk_upstream {
    server uk_server;
    server backup_server backup;
  }

  upstream us_upstream {
    server us_server_1;
    server us_server_2;
    server backup_server backup;
  }

  upstream rest_world_upstream {
    server rest_world_server;
    server backup_server backup;
  }

  lua_shared_dict healthcheck 1m;
  lua_socket_log_errors off;

  init_worker_by_lua_block {
    local merge = require "resty.utils.merge_tables"
    local hc = require "resty.upstream.healthcheck"

    local common_props = {
      shm = "healthcheck",
      type = "http",
      http_req = "GET / HTTP/1.0\r\n\r\n",
      interval = 5000,
      timeout = 1000,
      fall = 3,
      rise = 2,
      valid_statuses = {200},
      concurrency = 10,
    }

    local uk_props = {upstream = "uk_upstream"}
    local us_props = {upstream = "us_upstream"}
    local rest_world_props = {upstream = "rest_world_upstream"}

    hc.spawn_checker(merge(common_props, uk_props))
    hc.spawn_checker(merge(common_props, us_props))
    hc.spawn_checker(merge(common_props, rest_world_props))
  }

  server {
    listen 80;

    location / {
      proxy_pass http://$country_upstream$request_uri;
      proxy_next_upstream error timeout http_500;
    }
  }
}
